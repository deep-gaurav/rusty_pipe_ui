[env]
CARGO_MAKE_EXTEND_WORKSPACE_MAKEFILE = true
CARGO_MAKE_WORKSPACE_INCLUDE_MEMBERS = ["native/rustypipeuinative"]
ANDROID_PLATFORM_VERSION = "28"
LIB_OUT_DIR = "debug"
TARGET_OS = "unknown"
DEV = true
RELEASE = false

[env.release]
RELEASE = true
DEV = false
LIB_OUT_DIR = "release"

[tasks.test-flow]
disabled = true

[tasks.android-dev]
description = "development android x86_64 emulator"
category = "Build"
dependencies = [
  "setup-crate-type-android",
  "pre-android",
  "android-x86_64",
  "android-x86_64-release",
  "post-android-x86_64",
  "post-android",
  ]

[tasks.android-arm]
description = "build android ARM64 for actual device"
category = "Build"
dependencies = [
  "setup-crate-type-android",
  "pre-android",
  "android-aarch64",
  "android-aarch64-release",
  "post-android-aarch64",
  "post-android",
  ]


[tasks.build]
description = "Runs the rust compiler."
category = "Build"
dependencies = []

[tasks.build.linux]
description = "Runs the rust compiler."
category = "Build"
dependencies = ["linux","android"]

[tasks.build.windows]
description = "Runs the rust compiler."
category = "Build"
dependencies = [ "windows"]

[tasks.build.mac]
description = "Runs the rust compiler."
category = "Build"
dependencies = ["android", "ios"]

[tasks.ios]
description = "build iOS targets"
category = "Build"
dependencies = ["ios-build", "ios-release", "post-ios"]

[tasks.ios-build]
condition = { platforms = ["mac"], env_true = ["DEV"] }
description = "Build ios targets."
category = "Build"
command = "cargo"
args = ["lipo"]
dependencies = [
    "setup-crate-type-ios",
]

[tasks.ios-release]
condition = { platforms = ["mac"], env_true = ["RELEASE"] }
description = "Build ios targets."
category = "Build"
command = "cargo"
args = ["lipo", "--release"]
dependencies = [
    "setup-crate-type-ios",
]

[tasks.post-ios]
script_runner = "@duckscript"
condition = { platforms = ["mac"] }
script = [
    """
    cp ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/target/universal/${LIB_OUT_DIR}/lib${CARGO_MAKE_CRATE_FS_NAME}.a \
    ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/packages/${CARGO_MAKE_CRATE_FS_NAME}/ios/lib${CARGO_MAKE_CRATE_FS_NAME}.a
    """,
    """
    cp ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/native/${CARGO_MAKE_CRATE_CURRENT_WORKSPACE_MEMBER}/binding.h \
    ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/packages/${CARGO_MAKE_CRATE_FS_NAME}/ios/Classes/binding.h
    """,
]
dependencies = ["restore-crate-type"]

[tasks.android]
description = "Build android targets."
category = "Build"
dependencies = [
    "setup-crate-type-android",
    "pre-android",
    "android-aarch64",
    "android-aarch64-release",
    "post-android-aarch64",
    "android-armv7",
    "android-armv7-release",
    "post-android-armv7",
    "android-i686",
    "android-i686-release",
    "post-android-i686",
    "android-x86_64",
    "android-x86_64-release",
    "post-android-x86_64",
    "post-android"
]

[tasks.linux]
description = "Build linux targets."
category = "Build"
dependencies = [
    "setup-crate-type-linux",
    "pre-linux",
    "linux-build",
    "linux-build-release",
    "post-linux",
    "post-android"
]

[tasks.windows]
description = "Build linux targets."
category = "Build"
dependencies = [
    "setup-crate-type-windows",
    "pre-windows",
    "windows-build",
    "windows-build-release",
    "post-windows",
    "post-android"
]

[tasks.android-build]
private = true
condition = { env_true = ["DEV"], env_set = ["ANDROID_BUILD_TARGET"] }
command = "cargo"
args = [
  "ndk", 
  "--platform", 
  "${ANDROID_PLATFORM_VERSION}", 
  "--target", 
  "${ANDROID_BUILD_TARGET}", 
  "build",
]

[tasks.linux-build]
private = true
condition = { env_true = ["DEV"] }
command = "cargo"
args = [
  # "ndk", 
  # "--platform", 
  # "${ANDROID_PLATFORM_VERSION}", 
  # "--target", 
  # "${ANDROID_BUILD_TARGET}", 
  "build",
]
[tasks.windows-build]
private = true
condition = { env_true = ["DEV"] }
command = "cargo"
args = [
  # "ndk", 
  # "--platform", 
  # "${ANDROID_PLATFORM_VERSION}", 
  # "--target", 
  # "${ANDROID_BUILD_TARGET}", 
  "build",
  # "--target","x86_64-pc-windows-gnu"
]

[tasks.linux-build-release]
private = true
condition = { env_true = ["RELEASE"] }
command = "cargo"
args = [
  # "ndk", 
  # "--platform", 
  # "${ANDROID_PLATFORM_VERSION}", 
  # "--target", 
  # "${ANDROID_BUILD_TARGET}", 
  "build",
  "--release"
]
[tasks.windows-build-release]
private = true
condition = { env_true = ["RELEASE"] }
command = "cargo"
args = [
  # "ndk", 
  # "--platform", 
  # "${ANDROID_PLATFORM_VERSION}", 
  # "--target", 
  # "${ANDROID_BUILD_TARGET}", 
  "build",
  "--release",
    # "--target","x86_64-pc-windows-gnu"

]

[tasks.android-build-release]
private = true
condition = { env_true = ["RELEASE"], env_set = ["ANDROID_BUILD_TARGET"] }
command = "cargo"
args = [
  "ndk", 
  "--platform", 
  "${ANDROID_PLATFORM_VERSION}", 
  "--target", 
  "${ANDROID_BUILD_TARGET}", 
  "build",
  "--release"
]

[tasks.android-aarch64]
private = true
condition = { env_true = ["DEV"] }
env = { ANDROID_BUILD_TARGET = "arm64-v8a" }
run_task = "android-build"

[tasks.android-armv7]
private = true
condition = { env_true = ["DEV"] }
env = { ANDROID_BUILD_TARGET = "armeabi-v7a" }
run_task = "android-build"

[tasks.android-i686]
private = true
condition = { env_true = ["DEV"] }
env = { ANDROID_BUILD_TARGET = "x86" }
run_task = "android-build"

[tasks.android-x86_64]
private = true
condition = { env_true = ["DEV"] }
env = { ANDROID_BUILD_TARGET = "x86_64" }
run_task = "android-build"

[tasks.android-aarch64-release]
private = true
condition = { env_true = ["RELEASE"] }
env = { ANDROID_BUILD_TARGET = "arm64-v8a" }
run_task = "android-build-release"

[tasks.android-armv7-release]
private = true
condition = { env_true = ["RELEASE"] }
env = { ANDROID_BUILD_TARGET = "armeabi-v7a" }
run_task = "android-build-release"

[tasks.android-i686-release]
private = true
condition = { env_true = ["RELEASE"] }
env = { ANDROID_BUILD_TARGET = "x86" }
run_task = "android-build-release"

  
[tasks.android-x86_64-release]
private = true
condition = { env_true = ["RELEASE"] }
env = { ANDROID_BUILD_TARGET = "x86_64" }
run_task = "android-build-release"

[tasks.pre-android]
private = true
script_runner = "@duckscript"
script = [
    "mkdir ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/packages/${CARGO_MAKE_CRATE_FS_NAME}/android/src/main/jniLibs/arm64-v8a",
    "mkdir ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/packages/${CARGO_MAKE_CRATE_FS_NAME}/android/src/main/jniLibs/armeabi-v7a",
    "mkdir ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/packages/${CARGO_MAKE_CRATE_FS_NAME}/android/src/main/jniLibs/x86",
    "mkdir ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/packages/${CARGO_MAKE_CRATE_FS_NAME}/android/src/main/jniLibs/x86_64",
]

[tasks.pre-linux]
private = true
script_runner = "@duckscript"
script = [
    "mkdir ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/packages/${CARGO_MAKE_CRATE_FS_NAME}/linux/libs",
]

[tasks.pre-windows]
private = true
script_runner = "@duckscript"
script = [
    "mkdir ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/packages/${CARGO_MAKE_CRATE_FS_NAME}/windows/libs",
]

[tasks.copy-lib]
private = true
condition = { env_set = ["ANDROID_TARGET", "JNI_LIB_DIR"] }
script_runner = "@duckscript"
script = [
    """
    cp ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/target/${ANDROID_TARGET}/${LIB_OUT_DIR}/lib${CARGO_MAKE_CRATE_FS_NAME}.so \
    ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/packages/${CARGO_MAKE_CRATE_FS_NAME}/android/src/main/jniLibs/${JNI_LIB_DIR}/lib${CARGO_MAKE_CRATE_FS_NAME}.so
    """,
]


[tasks.post-linux]
private = true
condition = {  }
script_runner = "@duckscript"
script = [
    """
    cp ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/target/${LIB_OUT_DIR}/lib${CARGO_MAKE_CRATE_FS_NAME}.so \
    ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/packages/${CARGO_MAKE_CRATE_FS_NAME}/linux/libs/lib${CARGO_MAKE_CRATE_FS_NAME}.so
    """,
]

[tasks.post-windows]
private = true
condition = {  }
script_runner = "@duckscript"
script = [
    """
    cp ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/target/${LIB_OUT_DIR}/lib${CARGO_MAKE_CRATE_FS_NAME}.dll \
    ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/packages/${CARGO_MAKE_CRATE_FS_NAME}/windows/libs/lib${CARGO_MAKE_CRATE_FS_NAME}.dll
    """,
]

[tasks.post-android-aarch64]
private = true
env = { ANDROID_TARGET = "aarch64-linux-android", JNI_LIB_DIR = "arm64-v8a" }
run_task = "copy-lib"

[tasks.post-android-armv7]
private = true
env = { ANDROID_TARGET = "armv7-linux-androideabi", JNI_LIB_DIR = "armeabi-v7a" }
run_task = "copy-lib"

[tasks.post-android-i686]
private = true
env = { ANDROID_TARGET = "i686-linux-android", JNI_LIB_DIR = "x86" }
run_task = "copy-lib"


[tasks.post-android-x86_64]
private = true
env = { ANDROID_TARGET = "x86_64-linux-android", JNI_LIB_DIR = "x86_64" }
run_task = "copy-lib"

[tasks.post-android]
dependencies = ["restore-crate-type"]

[tasks.setup-crate-type-android]
private = true
env = { TARGET_OS = "android" }
run_task = "setup-crate-type"

[tasks.setup-crate-type-linux]
private = true
env = { TARGET_OS = "linux" }
run_task = "setup-crate-type"

[tasks.setup-crate-type-windows]
private = true
env = { TARGET_OS = "windows" }
run_task = "setup-crate-type"


[tasks.setup-crate-type-ios]
private = true
env = { TARGET_OS = "ios" }
run_task = "setup-crate-type"

[tasks.setup-crate-type]
private = true
script_runner = "@duckscript"
script = [
    """
    toml = readfile ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/native/${CARGO_MAKE_CRATE_CURRENT_WORKSPACE_MEMBER}/Cargo.toml
    crate_type = set ""
    os = get_env TARGET_OS
    is_android = eq ${os} "android"
    is_ios = eq ${os} "ios"
    is_linux = eq ${os} "linux"
    is_windows = eq ${os} "windows"
    if ${is_android}
      crate_type = set "cdylib"
    elseif ${is_ios}
      crate_type = set "staticlib"
    elseif ${is_linux}
      crate_type = set "cdylib"
    elseif ${is_windows}
      crate_type = set "cdylib"
    else
      crate_type = set "rlib"
    end
    val = replace ${toml} "rlib" ${crate_type}
    result = writefile ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/native/${CARGO_MAKE_CRATE_CURRENT_WORKSPACE_MEMBER}/Cargo.toml ${val}
    assert ${result}
    """,
]

[tasks.restore-crate-type]
private = true
script_runner = "@duckscript"
script = [
    """
    toml = readfile ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/native/${CARGO_MAKE_CRATE_CURRENT_WORKSPACE_MEMBER}/Cargo.toml
    crate_type = set ""
    os = get_env TARGET_OS
    is_android = eq ${os} "android"
    is_ios = eq ${os} "ios"
    if ${is_android}
      crate_type = set "cdylib"
    elseif ${is_ios}
      crate_type = set "staticlib"
    else
      crate_type = set "rlib"
    end
    val = replace ${toml} ${crate_type} "rlib"
    result = writefile ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/native/${CARGO_MAKE_CRATE_CURRENT_WORKSPACE_MEMBER}/Cargo.toml ${val}
    assert ${result}
    """,
]
